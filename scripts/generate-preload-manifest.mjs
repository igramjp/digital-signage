#!/usr/bin/env node
import { promises as fs } from 'fs';
import path from 'path';

const root = process.cwd();
// Use SvelteKit's static assets directory so both web and Tauri builds align
const publicDir = path.join(root, 'static');
const imagesDir = path.join(publicDir, 'images');
const videosDir = path.join(publicDir, 'videos');
const outFile = path.join(root, 'src', 'lib', 'preload-manifest.ts');

const imageExts = new Set(['.png', '.jpg', '.jpeg', '.webp', '.gif', '.svg']);
const videoExts = new Set(['.mp4', '.webm', '.ogg']);

async function listFilesRecursively(dir) {
  const out = [];
  try {
    const entries = await fs.readdir(dir, { withFileTypes: true });
    for (const entry of entries) {
      const full = path.join(dir, entry.name);
      if (entry.isDirectory()) {
        out.push(...(await listFilesRecursively(full)));
      } else if (entry.isFile()) {
        out.push(full);
      }
    }
  } catch (e) {
    // Directory may not exist; ignore
  }
  return out;
}

function toWebPath(file) {
  // Convert absolute file under static/ to web path starting with '/'
  const rel = path.relative(publicDir, file).split(path.sep).join('/');
  return `/${rel}`;
}

function byPath(a, b) {
  return a.localeCompare(b);
}

async function main() {
  const all = await listFilesRecursively(publicDir);
  const imageFiles = all
    .filter((f) => imageExts.has(path.extname(f).toLowerCase()))
    .map(toWebPath)
    .sort(byPath);
  const videoFiles = all
    .filter((f) => videoExts.has(path.extname(f).toLowerCase()))
    .map(toWebPath)
    .sort(byPath);

  const header = `// Auto-generated by scripts/generate-preload-manifest.mjs\n// Do not edit by hand\n`;
  const content = `${header}export const imageFiles: string[] = ${JSON.stringify(
    imageFiles,
    null,
    2,
  )} as const;\nexport const videoFiles: string[] = ${JSON.stringify(
    videoFiles,
    null,
    2,
  )} as const;\n`;

  await fs.mkdir(path.dirname(outFile), { recursive: true });
  await fs.writeFile(outFile, content, 'utf8');
  console.log(`Wrote manifest to ${path.relative(root, outFile)}`);
  console.log(`Images: ${imageFiles.length}, Videos: ${videoFiles.length}`);
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
